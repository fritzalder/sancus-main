diff --git a/clang/lib/CodeGen/CodeGenModule.cpp b/clang/lib/CodeGen/CodeGenModule.cpp
index 3ecc87432..fa09e89a1 100644
--- a/clang/lib/CodeGen/CodeGenModule.cpp
+++ b/clang/lib/CodeGen/CodeGenModule.cpp
@@ -1967,6 +1967,9 @@ void CodeGenModule::SetFunctionAttributes(GlobalDecl GD, llvm::Function *F,
       !CodeGenOpts.SanitizeCfiCanonicalJumpTables)
     CreateFunctionTypeMetadataForIcall(FD, F);
 
+  if (FD->hasAttr<AnnotateAttr>())
+    AddGlobalAnnotations(FD, F);
+
   if (getLangOpts().OpenMP && FD->hasAttr<OMPDeclareSimdDeclAttr>())
     getOpenMPRuntime().emitDeclareSimdFunction(FD, F);
 
@@ -2266,9 +2269,25 @@ void CodeGenModule::EmitVTablesOpportunistically() {
 }
 
 void CodeGenModule::EmitGlobalAnnotations() {
-  if (Annotations.empty())
+  if (NeededAnnotations.empty())
     return;
 
+  std::vector<llvm::Constant*> Annotations;
+
+  for (AnnotationMap::const_iterator it = NeededAnnotations.begin(),
+       end = NeededAnnotations.end(); it != end; ++it) {
+    llvm::Value* V = it->second;
+    if (!V)
+      continue;
+    llvm::GlobalValue* GV = cast<llvm::GlobalValue>(V);
+    const ValueDecl* D = it->first;
+    // Get the struct elements for these annotations.
+    for (specific_attr_iterator<AnnotateAttr>
+        ai = D->specific_attr_begin<AnnotateAttr>(),
+        ae = D->specific_attr_end<AnnotateAttr>(); ai != ae; ++ai)
+      Annotations.push_back(EmitAnnotateAttr(GV, *ai, D->getLocation()));
+  }
+
   // Create a new global variable for the ConstantStruct in the Module.
   llvm::Constant *Array = llvm::ConstantArray::get(llvm::ArrayType::get(
     Annotations[0]->getType(), Annotations.size()), Annotations);
@@ -2337,9 +2356,7 @@ llvm::Constant *CodeGenModule::EmitAnnotateAttr(llvm::GlobalValue *GV,
 void CodeGenModule::AddGlobalAnnotations(const ValueDecl *D,
                                          llvm::GlobalValue *GV) {
   assert(D->hasAttr<AnnotateAttr>() && "no annotate attribute");
-  // Get the struct elements for these annotations.
-  for (const auto *I : D->specific_attrs<AnnotateAttr>())
-    Annotations.push_back(EmitAnnotateAttr(GV, I, D->getLocation()));
+  NeededAnnotations[D] = GV;
 }
 
 bool CodeGenModule::isInSanitizerBlacklist(SanitizerMask Kind,
diff --git a/clang/lib/CodeGen/CodeGenModule.h b/clang/lib/CodeGen/CodeGenModule.h
index 19085b582..35ac184d8 100644
--- a/clang/lib/CodeGen/CodeGenModule.h
+++ b/clang/lib/CodeGen/CodeGenModule.h
@@ -408,7 +408,8 @@ private:
       CPUSpecificManglings;
 
   /// Global annotations.
-  std::vector<llvm::Constant*> Annotations;
+  typedef std::map<const ValueDecl*, llvm::WeakVH> AnnotationMap;
+  AnnotationMap NeededAnnotations;
 
   /// Map used to get unique annotation strings.
   llvm::StringMap<llvm::Constant*> AnnotationStrings;
